{"version":3,"sources":["../../../src/auth/jwt-auth/jwt-auth.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './jwt-auth.constant';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n  constructor(private readonly jwtService: JwtService) {}\n\n  async encryptJwtAccessToken(accessTokenPayload: any) {\n    this.logger.log(this.encryptJwtAccessToken.name);\n\n    const accessToken: string = this.jwtService.sign(accessTokenPayload, {\n      expiresIn: jwtConstants.accessTokenLifetime ?? '15m',\n      secret: jwtConstants.accessSecretKey,\n    });\n\n    return accessToken;\n  }\n\n  async encryptJwtRefreshToken(refreshTokenPayload: any) {\n    this.logger.log(this.encryptJwtRefreshToken.name);\n\n    const refreshToken = this.jwtService.sign(refreshTokenPayload, {\n      expiresIn: jwtConstants.refreshTokenLifetime ?? '7d',\n      secret: jwtConstants.refreshSecretKey,\n    });\n\n    return refreshToken;\n  }\n\n  async decryptJwtAccessToken<ATP extends object>(accessToken: string) {\n    this.logger.log(this.decryptJwtAccessToken.name);\n    let tokenData: ATP | null = null;\n    try {\n      tokenData = this.jwtService.verify<ATP>(accessToken, {\n        secret: jwtConstants.accessSecretKey,\n      });\n    } catch (error: any) {}\n    return tokenData;\n  }\n\n  async decryptJwtRefreshToken<RTP extends object>(accessToken: string) {\n    this.logger.log(this.decryptJwtRefreshToken.name);\n    let tokenData: RTP | null = null;\n    try {\n      tokenData = this.jwtService.verify<RTP>(accessToken, {\n        secret: jwtConstants.refreshSecretKey,\n      });\n    } catch (error: any) {}\n    return tokenData;\n  }\n}\n"],"names":["JwtAuthService","encryptJwtAccessToken","accessTokenPayload","logger","log","name","accessToken","jwtService","sign","expiresIn","jwtConstants","accessTokenLifetime","secret","accessSecretKey","encryptJwtRefreshToken","refreshTokenPayload","refreshToken","refreshTokenLifetime","refreshSecretKey","decryptJwtAccessToken","tokenData","verify","error","decryptJwtRefreshToken","constructor","Logger","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;wBALsB;qBACR;iCACE;;;;;;;;;;AAGtB,IAAA,AAAMA,iBAAN,MAAMA;IAIX,MAAMC,sBAAsBC,kBAAuB,EAAE;QACnD,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,IAAI,CAACH,qBAAqB,CAACI,IAAI;QAE/C,MAAMC,cAAsB,IAAI,CAACC,UAAU,CAACC,IAAI,CAACN,oBAAoB;YACnEO,WAAWC,6BAAY,CAACC,mBAAmB,IAAI;YAC/CC,QAAQF,6BAAY,CAACG,eAAe;QACtC;QAEA,OAAOP;IACT;IAEA,MAAMQ,uBAAuBC,mBAAwB,EAAE;QACrD,IAAI,CAACZ,MAAM,CAACC,GAAG,CAAC,IAAI,CAACU,sBAAsB,CAACT,IAAI;QAEhD,MAAMW,eAAe,IAAI,CAACT,UAAU,CAACC,IAAI,CAACO,qBAAqB;YAC7DN,WAAWC,6BAAY,CAACO,oBAAoB,IAAI;YAChDL,QAAQF,6BAAY,CAACQ,gBAAgB;QACvC;QAEA,OAAOF;IACT;IAEA,MAAMG,sBAA0Cb,WAAmB,EAAE;QACnE,IAAI,CAACH,MAAM,CAACC,GAAG,CAAC,IAAI,CAACe,qBAAqB,CAACd,IAAI;QAC/C,IAAIe,YAAwB;QAC5B,IAAI;YACFA,YAAY,IAAI,CAACb,UAAU,CAACc,MAAM,CAAMf,aAAa;gBACnDM,QAAQF,6BAAY,CAACG,eAAe;YACtC;QACF,EAAE,OAAOS,OAAY,CAAC;QACtB,OAAOF;IACT;IAEA,MAAMG,uBAA2CjB,WAAmB,EAAE;QACpE,IAAI,CAACH,MAAM,CAACC,GAAG,CAAC,IAAI,CAACmB,sBAAsB,CAAClB,IAAI;QAChD,IAAIe,YAAwB;QAC5B,IAAI;YACFA,YAAY,IAAI,CAACb,UAAU,CAACc,MAAM,CAAMf,aAAa;gBACnDM,QAAQF,6BAAY,CAACQ,gBAAgB;YACvC;QACF,EAAE,OAAOI,OAAY,CAAC;QACtB,OAAOF;IACT;IA5CAI,YAAY,AAAiBjB,UAAsB,CAAE;aAAxBA,aAAAA;aADZJ,SAAS,IAAIsB,cAAM,CAACzB,eAAeK,IAAI;IACF;AA6CxD;AA/CaL;IADZ0B,IAAAA,kBAAU;;;eAGgC,eAAU,4BAAV,eAAU;;GAFxC1B"}