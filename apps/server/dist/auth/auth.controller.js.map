{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { GoogleAuthService } from './google-auth/google-auth.service';\nimport { JwtAuthService } from './jwt-auth/jwt-auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly googleAuthService: GoogleAuthService,\n    private readonly authService: AuthService,\n    private readonly jwtAuthService: JwtAuthService,\n  ) {}\n\n  @Get('/google/url')\n  async googleUrl() {\n    const url = await this.googleAuthService.getAuthUrl();\n    return { authUrl: url };\n  }\n\n  @Post('/local/login')\n  async localLogin(){\n    \n  }\n  @Post('/google/login')\n  async googleLogin(@Body() data: { code: string }) {\n    console.log({ data });\n\n    const googleUser = await this.googleAuthService.validateUser(data.code);\n    if (!googleUser) {\n      throw new UnauthorizedException('Google Auth Filled');\n    }\n\n    let user = await this.authService.findOne({ email: googleUser.email });\n    if (!user) {\n      user = await this.authService.createUser({\n        firstName: googleUser.given_name,\n        lastName: googleUser.family_name,\n        email: googleUser.email,\n        email_verified: googleUser.email_verified,\n      });\n    }\n\n    const jwt = {\n      accessToken: await this.jwtAuthService.encryptJwtAccessToken({\n        userId: user.userId,\n      }),\n      refreshToken: await this.jwtAuthService.encryptJwtRefreshToken({\n        userId: user.userId,\n      }),\n    };\n\n    return { user, jwt };\n  }\n}\n"],"names":["AuthController","googleUrl","url","googleAuthService","getAuthUrl","authUrl","localLogin","googleLogin","data","console","log","googleUser","validateUser","code","UnauthorizedException","user","authService","findOne","email","createUser","firstName","given_name","lastName","family_name","email_verified","jwt","accessToken","jwtAuthService","encryptJwtAccessToken","userId","refreshToken","encryptJwtRefreshToken","constructor","Get","Post","Body","Controller"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAYaA;;;eAAAA;;;wBANN;6BACqB;mCACM;gCACH;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,iBAAN,MAAMA;IAOX,MACMC,YAAY;QAChB,MAAMC,MAAM,MAAM,IAAI,CAACC,iBAAiB,CAACC,UAAU;QACnD,OAAO;YAAEC,SAASH;QAAI;IACxB;IAEA,MACMI,aAAY,CAElB;IACA,MACMC,YAAY,AAAQC,IAAsB,EAAE;QAChDC,QAAQC,GAAG,CAAC;YAAEF;QAAK;QAEnB,MAAMG,aAAa,MAAM,IAAI,CAACR,iBAAiB,CAACS,YAAY,CAACJ,KAAKK,IAAI;QACtE,IAAI,CAACF,YAAY;YACf,MAAM,IAAIG,6BAAqB,CAAC;QAClC;QAEA,IAAIC,OAAO,MAAM,IAAI,CAACC,WAAW,CAACC,OAAO,CAAC;YAAEC,OAAOP,WAAWO,KAAK;QAAC;QACpE,IAAI,CAACH,MAAM;YACTA,OAAO,MAAM,IAAI,CAACC,WAAW,CAACG,UAAU,CAAC;gBACvCC,WAAWT,WAAWU,UAAU;gBAChCC,UAAUX,WAAWY,WAAW;gBAChCL,OAAOP,WAAWO,KAAK;gBACvBM,gBAAgBb,WAAWa,cAAc;YAC3C;QACF;QAEA,MAAMC,MAAM;YACVC,aAAa,MAAM,IAAI,CAACC,cAAc,CAACC,qBAAqB,CAAC;gBAC3DC,QAAQd,KAAKc,MAAM;YACrB;YACAC,cAAc,MAAM,IAAI,CAACH,cAAc,CAACI,sBAAsB,CAAC;gBAC7DF,QAAQd,KAAKc,MAAM;YACrB;QACF;QAEA,OAAO;YAAEd;YAAMU;QAAI;IACrB;IA7CAO,YACE,AAAiB7B,iBAAoC,EACrD,AAAiBa,WAAwB,EACzC,AAAiBW,cAA8B,CAC/C;aAHiBxB,oBAAAA;aACAa,cAAAA;aACAW,iBAAAA;IAChB;AA0CL;;IAxCGM,IAAAA,WAAG,EAAC;;;;GAPMjC;;IAaVkC,IAAAA,YAAI,EAAC;;;;GAbKlC;;IAiBVkC,IAAAA,YAAI,EAAC;IACaC,aAAAA,IAAAA,YAAI;;;;;;GAlBZnC;AAAAA;IADZoC,IAAAA,kBAAU,EAAC;;;eAG4B,oCAAiB,4BAAjB,oCAAiB;eACvB,wBAAW,4BAAX,wBAAW;eACR,8BAAc,4BAAd,8BAAc;;GAJtCpC"}